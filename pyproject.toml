[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "agraph"
version = "1.0.0"
description = "A comprehensive toolkit for building, storing and querying knowledge graphs with multiple builders and storage backends"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "JasonDZS", email = "dizhensheng@sz.tsinghua.edu.cn"},
]
maintainers = [
    {name = "JasonDZS", email = "dizhensheng@sz.tsinghua.edu.cn"},
]
keywords = [
    "knowledge-graph", 
    "graph-database", 
    "nlp", 
    "entity-extraction", 
    "relation-extraction",
    "lightrag",
    "neo4j",
    "agent",
    "ai",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "lightrag-hku>=1.4.4",
    "neo4j>=5.28.2",
    "numpy>=2.0.0",
    "openai>=1.98.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "pylint>=3.0",
    "isort>=5.0",
    "bandit[toml]>=1.7",
    "pre-commit>=3.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=2.0",
]
all = [
    "agraph[dev,docs]",
]

[project.urls]
Homepage = "https://github.com/JasonDZS/agraph"
Documentation = "https://github.com/JasonDZS/agraph"
Repository = "https://github.com/JasonDZS/agraph.git"
"Bug Tracker" = "https://github.com/JasonDZS/agraph/issues"
Changelog = "https://github.com/JasonDZS/agraph/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["agraph*"]

[tool.setuptools.package-data]
"agraph" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[[tool.uv.index]]
url = "https://mirrors.cloud.tencent.com/pypi/simple"
default = true

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=agraph",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["agraph"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
known_first_party = ["agraph"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
