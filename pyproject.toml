[project]
name = "agraph"
version = "0.1.0"
description = "A knowledge graph toolkit for entity and relation management"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "agraph-dev", email = "dev@agraph.com"},
]
keywords = ["knowledge-graph", "entity", "relation", "nlp", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "chromadb<1.0",
    "loguru>=0.7.3",
    "networkx>=3.2",
    "openai>=1.99.9",
    "pydantic>=2.11.7",
    "python-dotenv>=1.0.0",
    "tiktoken>=0.11.0",
]

[project.optional-dependencies]
vectordb = ["chromadb>=0.5.0"]
jupyter = ["nest-asyncio>=1.5.0"]
dev = [
    "coverage>=7.4.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "nest-asyncio>=1.5.0",
]
docs = [
    "sphinx>=8.0.0",
    "sphinx-rtd-theme>=3.0",
]

[project.urls]
Homepage = "https://github.com/your-org/agraph"
Repository = "https://github.com/your-org/agraph.git"
Documentation = "https://agraph.readthedocs.io"
Issues = "https://github.com/your-org/agraph/issues"

[project.scripts]
agraph = "agraph.cli:main"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["agraph"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pylint.main]
max-line-length = 100
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "fixme",
    "no-member",  # Disable no-member for Pydantic models
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.messages_control]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# Unittest configuration - using unittest instead of pytest
# Run tests with: python -m unittest discover tests
# Run with coverage: coverage run -m unittest discover tests && coverage report

[tool.coverage.run]
source = ["agraph"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
